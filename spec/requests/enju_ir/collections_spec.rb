 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

module EnjuIr
  RSpec.describe "/collections", type: :request do
    # Collection. As you add validations to Collection, be sure to
    # adjust the attributes here as well.
    let(:valid_attributes) {
      FactoryBot.attributes_for(:collection)
    }

    let(:invalid_attributes) {
      { title: nil }
    }

    fixtures :all

    describe "GET /index" do
      it "renders a successful response" do
        FactoryBot.create(:collection)
        get enju_ir.collections_url
        expect(response).to be_successful
      end
    end

    describe "GET /show" do
      it "renders a successful response" do
        collection = FactoryBot.create(:collection)
        get enju_ir.collection_url(collection)
        expect(response).to be_successful
      end
    end

    describe "GET /new" do
      before(:each) do
        sign_in users(:user1)
      end

      it "renders a successful response" do
        get enju_ir.new_collection_url
        expect(response).to be_successful
      end
    end

    describe "GET /edit" do
      before(:each) do
        sign_in users(:user1)
      end

      it "render a successful response" do
        collection = FactoryBot.create(:collection, user: users(:user1))
        get enju_ir.edit_collection_url(collection)
        expect(response).to be_successful
      end
    end

    describe "POST /create" do
      context "with valid parameters" do
        before(:each) do
          sign_in users(:user1)
        end

        it "creates a new Collection" do
          expect {
            post enju_ir.collections_url, params: { collection: valid_attributes }
          }.to change(Collection, :count).by(1)
        end

        it "redirects to the created collection" do
          post enju_ir.collections_url, params: { collection: valid_attributes }
          expect(response).to redirect_to(enju_ir.collection_url(Collection.last))
        end
      end

      context "with invalid parameters" do
        before(:each) do
          sign_in users(:user1)
        end

        it "does not create a new Collection" do
          expect {
            post enju_ir.collections_url, params: { collection: invalid_attributes }
          }.to change(Collection, :count).by(0)
        end

        it "renders a successful response (i.e. to display the 'new' template)" do
          post enju_ir.collections_url, params: { collection: invalid_attributes }
          expect(response).to be_successful
        end
      end
    end

    describe "PATCH /update" do
      before(:each) do
        sign_in users(:user1)
      end

      context "with valid parameters" do
        let(:new_attributes) {
          { title: 'test' }
        }

        it "updates the requested collection" do
          collection = FactoryBot.create(:collection, user: users(:user1))
          patch enju_ir.collection_url(collection), params: { collection: new_attributes }
          collection.reload
          expect(collection.title).to eq 'test'
        end

        it "redirects to the collection" do
          collection = FactoryBot.create(:collection, user: users(:user1))
          patch enju_ir.collection_url(collection), params: { collection: new_attributes }
          collection.reload
          expect(response).to redirect_to(enju_ir.collection_url(collection))
        end
      end

      context "with invalid parameters" do
        it "renders a successful response (i.e. to display the 'edit' template)" do
          collection = FactoryBot.create(:collection, user: users(:user1))
          patch enju_ir.collection_url(collection), params: { collection: invalid_attributes }
          expect(response).to be_successful
        end
      end
    end

    describe "DELETE /destroy" do
      before(:each) do
        sign_in users(:user1)
      end

      it "destroys the requested collection" do
        collection = FactoryBot.create(:collection, user: users(:user1))
        expect {
          delete enju_ir.collection_url(collection)
        }.to change(Collection, :count).by(-1)
      end

      it "redirects to the collections list" do
        collection = FactoryBot.create(:collection, user: users(:user1))
        delete enju_ir.collection_url(collection)
        expect(response).to redirect_to(enju_ir.collections_url)
      end
    end
  end
end
